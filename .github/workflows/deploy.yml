name: CI/CD to Kubernetes with GHCR

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry (Windows)
        shell: powershell
        run: |
          $GHCR_USERNAME = "${{ secrets.GHCR_USERNAME }}"
          $GHCR_TOKEN = "${{ secrets.GHCR_TOKEN }}"
          $pass = $GHCR_TOKEN | ConvertTo-SecureString -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential($GHCR_USERNAME, $pass)
          docker login ghcr.io --username $cred.UserName --password $cred.GetNetworkCredential().Password

      - name: Build and push Docker image
        shell: powershell
        run: |
          $USERNAME = "${{ secrets.GHCR_USERNAME }}"
          docker build -t ghcr.io/$USERNAME/node-app:latest .
          docker push ghcr.io/$USERNAME/node-app:latest

      - name: Set up kubeconfig
        shell: powershell
        run: |
          mkdir $env:USERPROFILE\.kube -Force
          $decoded = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String("${{ secrets.KUBECONFIG_DATA }}"))
          Set-Content -Path "$env:USERPROFILE\.kube\config" -Value $decoded

      - name: Deploy to Kubernetes
        shell: powershell
        run: |
          kubectl apply -f k8s/

      - name: Wait for pod to be ready
        shell: powershell
        run: |
          $podReady = $false
          for ($i = 0; $i -lt 20; $i++) {
            $status = kubectl get pods -n devops-challenge -l app=node-app -o jsonpath="{.items[0].status.phase}"
            if ($status -eq "Running") {
              Write-Host "‚úÖ Pod is running"
              $podReady = $true
              break
            }
            Write-Host "‚è≥ Waiting for pod to be ready... ($i)"
            Start-Sleep -Seconds 5
          }
          if (-not $podReady) {
            throw "‚ùå Pod did not become ready in time."
          }

      - name: Test /health endpoint via port-forward (1 minuto activo)
        shell: powershell
        run: |
          $job = Start-Job { kubectl port-forward svc/app-service 8080:80 -n devops-challenge }
          Start-Sleep -Seconds 5  # Espera a que levante el puerto

          try {
            $response = Invoke-RestMethod -Uri http://localhost:8080/health
            if ($response.status -ne "ok") {
              throw "‚ùå /health returned unexpected response: $($response | ConvertTo-Json)"
            }
            Write-Host "‚úÖ /health check passed: $($response | ConvertTo-Json)"
            Write-Host "üåê Esperando 60 segundos para abrir en navegador: http://localhost:8080/health"
            Start-Sleep -Seconds 60
          } catch {
            throw "‚ùå Error al probar el endpoint: $_"
          } finally {
            Stop-Job $job | Out-Null
            Remove-Job $job | Out-Null
          }

